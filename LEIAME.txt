
** Usando API Node **


0. Criar um servidor de banco de dados MySQL na Azure.

- User: tux
- Pass: ABC123xyz


Obs.: Após o servidor estar provisionado:

- Menu Configurações -> Parâmetros do servidor -> require_secure_transport OFF



1. Descompactar o arquivo api.zip ou clonar a aplicação Node do Github na VM Debian GNU/Linux.

❯ mkdir api && cd api

❯ unzip api.zip

<OU>

❯ git clone https://github.com/roger437linux/acme.git



2. Configurar o endereço do servidor MySQL na aplicação Node.

❯ cd acme

❯ vi .env



3. Criar banco de dados se restaurar tabelas.

❯ IP_DATABASE=<ENDPOINT_DB_SERVER>

❯ mysql -utux -pABC123xyz -h $IP_DATABASE -e "CREATE DATABASE acme_filmes"

❯ mysql -utux -pABC123xyz -h $IP_DATABASE acme_filmes < acme.sql



4. Executar a aplicação Node localmente.


❯ npm i

❯ node server.js


Obs.: Havendo erro de execução do Prisma, execute:

❯ npx prisma generate



5. Verificar no navegador de internet do host hospedeiro.

http://<IPVM>:8080/acmefilmes/filmes



6. Dockerizar a aplicação web node [Criar nova imagem Docker]

Obs.: Criar novo repositório no Docker Hub chamado "acme".


❯ ACCOUNT=<YOUR_DOCKER_HUB_ACCOUNT>

❯ docker build --tag $ACCOUNT/acme .



7. Criar contêiner para testar a nova imagem e verificar no navegador de internet do host hospedeiro.

❯ docker run -d --rm --name acme -p 8080:8080 $ACCOUNT/acme

http://<IPVM>:8080/acmefilmes/filmes



8. Enviar nova imagem para o Docker Hub

❯ docker push $ACCOUNT/acme



---------------------------------------------------------------------------------------------------



9. Criar serviço de aplicativo Azure utilizando a imagem enviando ao Docker Hub.


10. Criar Instância de Container Azure [ACI] utilizando a imagem enviando ao Docker Hub.



---------------------------------------------------------------------------------------------------



❯ sgpt "Tenho uma aplicação de api em nodejs usando o prisma. Preciso criar variáveis de ambiente no sistema operacional e poder utilizar essas
 variáveis de ambiente em uma string de conexão dentro do arquivo .env do prisma, como faço isso?"
Para usar variáveis de ambiente no arquivo .env do Prisma, você pode definir as variáveis no sistema operacional e referenciá-las no arquivo
.env. Aqui está um passo a passo:

 1 Defina as variáveis de ambiente no sistema operacional:
   No Linux, você pode adicionar as variáveis ao arquivo ~/.zshrc para que sejam carregadas sempre que abrir um terminal:

    export DATABASE_USER="seu_usuario"
    export DATABASE_PASSWORD="sua_senha"
    export DATABASE_HOST="seu_host"
    export DATABASE_PORT="sua_porta"
    export DATABASE_NAME="seu_banco"

   Após adicionar, recarregue o arquivo:

    source ~/.zshrc

 2 Use as variáveis no arquivo .env do Prisma:
   No arquivo .env, você pode referenciar as variáveis de ambiente usando a sintaxe ${VARIAVEL}:

    DATABASE_URL="postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?schema=public"

 3 Certifique-se de que o Prisma está configurado para usar o arquivo .env:
   O Prisma, por padrão, lê o arquivo .env na raiz do projeto. Certifique-se de que o arquivo está no local correto e que o Prisma está
   configurado para usá-lo.

Com isso, sua string de conexão usará as variáveis de ambiente definidas no sistema.
~ ❯

